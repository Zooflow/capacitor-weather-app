---
import Layout from '../layouts/Layout.astro';
import "../styles/global.css";
---

<Layout title="Weather app">
	<main class="cozy-main">
		<div class="container cozy-container">
      <header class="cozy-header">
        <h1>Clima en Temuco</h1>
        <div id="love-message" class="love-message">
          "El clima puede cambiar, pero mi amor por ti es constante ‚ù§Ô∏è"
        </div>
      </header>
      
      <div id="loading" class="cozy-loading">
        <span class="loader"></span>
        <p>Cargando datos del clima...</p>
      </div>
      
      <div id="weather-content" class="cozy-weather-content" style="display: none;">
        <div class="gif-container">
          <img id="weather-gif" src="/images/default-cozy.gif" alt="Clima GIF" class="weather-gif">
        </div>
        
        <div class="current-weather cozy-card">
          <div id="weather-icon" class="cozy-icon">‚òÄÔ∏è</div>
          <div class="temp-display" id="current-temp">--¬∞C</div>
          <div class="weather-desc" id="weather-desc">Cargando...</div>
          
          <div class="weather-details cozy-details">
            <div class="detail-card cozy-detail">
              <div class="detail-title">Sensaci√≥n t√©rmica</div>
              <div class="detail-value" id="feels-like">--¬∞C</div>
            </div>
            <div class="detail-card cozy-detail">
              <div class="detail-title">Humedad</div>
              <div class="detail-value" id="humidity">--%</div>
            </div>
            <div class="detail-card cozy-detail flex items-center p-4 justify-center">
                
                <div>
                  <div class="detail-title text-center">Viento</div>
                  <div class="detail-value font-bold text-lg" id="wind-speed">7 km/h</div>
                </div>
            </div>
            
            <div class="detail-card cozy-detail">
              <div class="detail-title">Calidad del Aire</div>
              <div class="air-quality">
                <div class="air-quality-indicator" id="air-quality-dot"></div>
                <div class="detail-value" id="air-quality">--</div>
              </div>
            </div>
          </div>
        </div>
        
        <h2 class="cozy-forecast-title">Pron√≥stico</h2>
        <div class="forecast-container cozy-forecast" id="forecast-container">
          <!-- Forecast items will be added here by JavaScript -->
        </div>
      </div>
      
      <div id="error-message" class="cozy-error" style="display: none;">
        <p>Error al cargar los datos del clima. Por favor, intente nuevamente m√°s tarde.</p>
      </div>
    </div>
	</main>
</Layout>

<style>
  .wind-icon-container {
    position: relative;
    overflow: hidden;
    background: linear-gradient(145deg, #e5f7ff 0%, #b3e5fc 70%, #e5f7ff 100%);
    transition: all 0.3s ease;
    border: 2px solid #b3e5fc;
  }

  .wind-icon-container:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 15px rgba(179, 229, 252, 0.3);
    border-color: #81d4fa;
  }

  .animate-wind {
    animation: windRotate 4s ease-in-out infinite;
    will-change: transform;
  }

  @keyframes windRotate {
    0% {
      transform: translateX(-8%) rotate(-8deg);
    }
    50% {
      transform: translateX(8%) rotate(8deg);
    }
    100% {
      transform: translateX(-8%) rotate(-8deg);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
  updateWeather(); // Carga inicial
  setInterval(updateWeather, 600000); // Actualiza cada 10 minutos (600,000 ms)
});

async function updateWeather() {
  const loadingElement = document.getElementById('loading');
  const weatherContent = document.getElementById('weather-content');
  const errorMessage = document.getElementById('error-message');
  const timestamp = new Date().getTime();
  
  try {
    loadingElement.style.display = 'block';
    weatherContent.style.display = 'none';
    errorMessage.style.display = 'none';
    
    // Obt√©n datos reales de OpenWeatherMap desde tu endpoint
    const response = await fetch(`/api/weather?nocache=${timestamp}`);
    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
    const data = await response.json();
    if (!data.list) throw new Error("No se encontraron datos del clima");
    
    // Actualiza el clima actual (tarjeta superior)
    updateCurrentWeather(data.list[0]);
    updateWeatherGif(data.list[0].weather[0].icon);
    
    // Procesa el pron√≥stico agrupando por d√≠a
    const dailyForecast = processDailyForecast(data.list);
    createForecastElements(dailyForecast);
    
    loadingElement.style.display = 'none';
    weatherContent.style.display = 'block';
  } catch (error) {
    console.error('Error al obtener datos del clima:', error);
    loadingElement.style.display = 'none';
    errorMessage.style.display = 'block';
  }
}

function updateCurrentWeather(currentData) {
  document.getElementById('current-temp').textContent = `${Math.round(currentData.main.temp)}¬∞C`;
  document.getElementById('weather-desc').textContent = capitalizeFirstLetter(currentData.weather[0].description);
  document.getElementById('feels-like').textContent = `${Math.round(currentData.main.feels_like)}¬∞C`;
  document.getElementById('humidity').textContent = `${currentData.main.humidity}%`;
  document.getElementById('wind-speed').textContent = `${Math.round(currentData.wind.speed * 3.6)} km/h`;
  
  // Actualiza el icono (emoji) para la tarjeta actual
  document.getElementById('weather-icon').textContent = getWeatherIconEmoji(currentData.weather[0].icon);
}

function getWeatherIconEmoji(iconCode) {
  const iconMap = {
    '01d': '‚òÄÔ∏è',
    '01n': 'üåô',
    '02d': '‚õÖ',
    '02n': '‚òÅÔ∏è',
    '03d': '‚òÅÔ∏è',
    '03n': '‚òÅÔ∏è',
    '04d': '‚òÅÔ∏è',
    '04n': '‚òÅÔ∏è',
    '09d': 'üåßÔ∏è',
    '09n': 'üåßÔ∏è',
    '10d': 'üå¶Ô∏è',
    '10n': 'üåßÔ∏è',
    '11d': '‚õàÔ∏è',
    '11n': '‚õàÔ∏è',
    '13d': '‚ùÑÔ∏è',
    '13n': '‚ùÑÔ∏è',
    '50d': 'üå´Ô∏è',
    '50n': 'üå´Ô∏è'
  };
  return iconMap[iconCode] || '‚òÄÔ∏è';
}

function updateWeatherGif(iconCode) {
  // Esta funci√≥n actualiza el GIF del clima actual (parte superior)
  const weatherGif = document.getElementById('weather-gif');
  const weatherGifs = {
    '01d': 'https://i.pinimg.com/originals/99/2c/7d/992c7d9f92a779914ec638fdf3daf4df.gif',
    '01n': 'https://64.media.tumblr.com/4bbf0eda6e58d5838a321a0a12f4bc60/93b164a2ee50418c-4a/s540x810/a7651f90589d362deea9ea264b56908625584f4f.gif',
    '02d': 'https://i.pinimg.com/originals/99/2c/7d/992c7d9f92a779914ec638fdf3daf4df.gif',
    '02n': 'https://64.media.tumblr.com/4bbf0eda6e58d5838a321a0a12f4bc60/93b164a2ee50418c-4a/s540x810/a7651f90589d362deea9ea264b56908625584f4f.gif',
    '03d': 'https://i.pinimg.com/originals/be/09/9d/be099d47486da0906cd8ff960ad6edea.gif',
    '03n': 'https://i.pinimg.com/originals/4e/3c/3a/4e3c3abef5c8cc641223d8b2950f4a74.gif',
    '04d': 'https://i.pinimg.com/originals/be/09/9d/be099d47486da0906cd8ff960ad6edea.gif',
    '04n': 'https://i.pinimg.com/originals/4e/3c/3a/4e3c3abef5c8cc641223d8b2950f4a74.gif',
    '09d': 'https://i.gifer.com/10LH.gif',
    '09n': 'https://i.pinimg.com/originals/7e/0f/89/7e0f897ddfd70e293c103238924d3a0b.gif',
    '10d': 'https://i.gifer.com/10LH.gif',
    '10n': 'https://i.pinimg.com/originals/7e/0f/89/7e0f897ddfd70e293c103238924d3a0b.gif',
    '11d': 'public/images/icons/thunderstorm.png',
    '11n': 'public/images/icons/thunderstorm-night.png',
    '13d': 'public/images/icons/snow.png',
    '13n': 'https://i.pinimg.com/originals/6a/26/4f/6a264ffff2b7f7623f13091792611ccf.gif',
    '50d': 'public/images/icons/mist.png',
    '50n': 'public/images/icons/mist-night.png',
    'default': 'public/images/weather/default-cozy.gif'
  };
  weatherGif.src = weatherGifs[iconCode] || weatherGifs['default'];
  weatherGif.alt = `Clima ${iconCode}`;
}

function processDailyForecast(forecastList) {
  const dailyData = {};
  
  forecastList.forEach(entry => {
    const date = new Date(entry.dt * 1000);
    const dayKey = date.toISOString().split('T')[0];
    
    if (!dailyData[dayKey]) {
      dailyData[dayKey] = {
        temp_min: entry.main.temp,
        temp_max: entry.main.temp,
        weather: entry.weather[0],
        hourDiff: Math.abs(date.getHours() - 12)
      };
    } else {
      dailyData[dayKey].temp_min = Math.min(dailyData[dayKey].temp_min, entry.main.temp);
      dailyData[dayKey].temp_max = Math.max(dailyData[dayKey].temp_max, entry.main.temp);
      
      // Selecciona la condici√≥n representativa, la m√°s cercana al mediod√≠a
      const currentHourDiff = Math.abs(date.getHours() - 12);
      if (currentHourDiff < dailyData[dayKey].hourDiff) {
        dailyData[dayKey].weather = entry.weather[0];
        dailyData[dayKey].hourDiff = currentHourDiff;
      }
    }
  });
  
  let dailyForecast = Object.keys(dailyData).map(day => ({
    date: day,
    temp_min: dailyData[day].temp_min,
    temp_max: dailyData[day].temp_max,
    weather: dailyData[day].weather
  }));
  
  dailyForecast.sort((a, b) => new Date(a.date) - new Date(b.date));
  if (dailyForecast.length > 5) {
    dailyForecast = dailyForecast.slice(0, 5);
  }
  return dailyForecast;
}

function createForecastElements(forecast) {
  const forecastContainer = document.getElementById('forecast-container');
  forecastContainer.innerHTML = '';
  
  forecast.forEach(day => {
    const dateObj = new Date(day.date);
    const dayOfWeek = getDayOfWeek(dateObj);
    const formattedDate = formatDate(dateObj);
    const iconUrl = getForecastIconUrl(day.weather.icon);
    
    const forecastItem = document.createElement('div');
    forecastItem.className = 'forecast-item';
    forecastItem.innerHTML = `
      <div class="forecast-date">${dayOfWeek}</div>
      <div class="forecast-date">${formattedDate}</div>
      <div class="forecast-icon-container">
        <img src="${iconUrl}" alt="${day.weather.description}" class="forecast-icon">
      </div>
      <div class="forecast-temp">${Math.round(day.temp_max)}¬∞C / ${Math.round(day.temp_min)}¬∞C</div>
      <div>${capitalizeFirstLetter(day.weather.description)}</div>
    `;
    forecastContainer.appendChild(forecastItem);
  });
}

function getForecastIconUrl(iconCode) {
  // Para el pron√≥stico se usan iconos SVG locales
  const icons = {
    '01d': 'images/icons/01d.svg',
    '01n': 'images/icons/01n.svg',
    '02d': 'images/icons/02d.svg',
    '02n': 'images/icons/02n.svg',
    '03d': 'images/icons/03d.svg',
    '03n': 'images/icons/03n.svg',
    '04d': 'images/icons/04d.svg',
    '04n': 'images/icons/04n.svg',
    '09d': 'images/icons/09d.svg',
    '09n': 'images/icons/09n.svg',
    '10d': 'images/icons/10d.svg',
    '10n': 'images/icons/10n.svg',
    '11d': 'images/icons/11d.svg',
    '11n': 'images/icons/11n.svg',
    '13d': 'images/icons/13d.svg',
    '13n': 'images/icons/13n.svg',
    '50d': 'images/icons/50d.svg',
    '50n': 'images/icons/50n.svg'
  };
  return icons[iconCode] || 'images/icons/default.svg';
}

function getDayOfWeek(date) {
  const days = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];
  return days[date.getDay()];
}

function formatDate(date) {
  return `${date.getDate()}/${date.getMonth() + 1}`;
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}




  
  
</script>

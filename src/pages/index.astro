---
import Layout from '../layouts/Layout.astro';
import "../styles/global.css";
---

<Layout title="Weather app">
	<main class="cozy-main">
		<div class="container cozy-container">
      <header class="cozy-header">
        <h1>Clima en Temuco</h1>
        <div id="love-message" class="love-message">
          "El clima puede cambiar, pero mi amor por ti es constante ‚ù§Ô∏è"
        </div>
      </header>
      
      <div id="loading" class="cozy-loading">
        <span class="loader"></span>
        <p>Cargando datos del clima...</p>
      </div>
      
      <div id="weather-content" class="cozy-weather-content" style="display: none;">
        <div class="gif-container">
          <img id="weather-gif" src="/images/default-cozy.gif" alt="Clima GIF" class="weather-gif">
        </div>
        
        <div class="current-weather cozy-card">
          <div id="weather-icon" class="cozy-icon">‚òÄÔ∏è</div>
          <div class="temp-display" id="current-temp">--¬∞C</div>
          <div class="weather-desc" id="weather-desc">Cargando...</div>
          
          <div class="weather-details cozy-details">
            <div class="detail-card cozy-detail">
              <div class="detail-title">Sensaci√≥n t√©rmica</div>
              <div class="detail-value" id="feels-like">--¬∞C</div>
            </div>
            <div class="detail-card cozy-detail">
              <div class="detail-title">Humedad</div>
              <div class="detail-value" id="humidity">--%</div>
            </div>
            <div class="detail-card cozy-detail flex items-center p-4 justify-center">
                
                <div>
                  <div class="detail-title text-center">Viento</div>
                  <div class="detail-value font-bold text-lg" id="wind-speed">7 km/h</div>
                </div>
            </div>
            
            <div class="detail-card cozy-detail">
              <div class="detail-title">Calidad del Aire</div>
              <div class="air-quality">
                <div class="air-quality-indicator" id="air-quality-dot"></div>
                <div class="detail-value" id="air-quality">--</div>
              </div>
            </div>
          </div>
        </div>
        
        <h2 class="cozy-forecast-title">Pron√≥stico</h2>
        <div class="forecast-container cozy-forecast" id="forecast-container">
          <!-- Forecast items will be added here by JavaScript -->
        </div>
      </div>
      
      <div id="error-message" class="cozy-error" style="display: none;">
        <p>Error al cargar los datos del clima. Por favor, intente nuevamente m√°s tarde.</p>
      </div>
    </div>
	</main>
</Layout>

<style>
  .wind-icon-container {
    position: relative;
    overflow: hidden;
    background: linear-gradient(145deg, #e5f7ff 0%, #b3e5fc 70%, #e5f7ff 100%);
    transition: all 0.3s ease;
    border: 2px solid #b3e5fc;
  }

  .wind-icon-container:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 15px rgba(179, 229, 252, 0.3);
    border-color: #81d4fa;
  }

  .animate-wind {
    animation: windRotate 4s ease-in-out infinite;
    will-change: transform;
  }

  @keyframes windRotate {
    0% {
      transform: translateX(-8%) rotate(-8deg);
    }
    50% {
      transform: translateX(8%) rotate(8deg);
    }
    100% {
      transform: translateX(-8%) rotate(-8deg);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const loadingElement = document.getElementById('loading');
    const weatherContent = document.getElementById('weather-content');
    const forecastContainer = document.getElementById('forecast-container');
    const errorMessage = document.getElementById('error-message');
    const weatherGif = document.getElementById('weather-gif');
    const loveMessage = document.getElementById('love-message');
    
    // Array of love messages to display randomly
    const loveMessages = [
      "No hay pron√≥stico que prediga lo mucho que te amo, porque mi amor por ti es infinito ‚ù§Ô∏è",
      "Eres mi rayo de sol en los d√≠as lluviosos ‚òÄÔ∏è",
      "Contigo, cada d√≠a es un clima perfecto üíï",
      "Te amo mucho mi osita hermosa üêª‚Äç‚ùÑÔ∏è",
      "Eres el calor que necesito en los d√≠as fr√≠os ‚òÉÔ∏è",
      "Como el clima, eres hermosa en todas tus formas üíñ",
      "No importa el clima, el d√≠a es mejor cuando pienso en ti ü•∞",
      "En cada amanecer mi primer pensamiento eres tu üíå",
      "Eres la luz que ilumina mis d√≠as oscuros üåÖ"
    ];
    
    // Set random love message
    loveMessage.textContent = loveMessages[Math.floor(Math.random() * loveMessages.length)];
    
    // GIF mapping for weather conditions
    const weatherGifs = {
      // Soleado
      '01d': 'public/images/weather/sunny-cozy.gif',
      // Noche despejada
      '01n': 'public/images/weather/clear-night-cozy.gif',
      // Parcialmente nublado d√≠a
      '02d': 'public/images/weather/partly-cloudy-day-cozy.gif',
      // Parcialmente nublado noche
      '02n': 'public/images/weather/partly-cloudy-night-cozy.gif',
      // Nublado
      '03d': 'public/images/icons/cloudy-cozy.gif',
      '03n': 'public/images/icons/cloudy-night-cozy.gif',
      '04d': 'public/images/icons/very-cloudy-cozy.gif',
      '04n': 'public/images/icons/very-cloudy-night-cozy.gif',
      // Lluvia ligera
      '09d': '/images/weather/light-rain-cozy.gif',
      '09n': '/images/weather/light-rain-night-cozy.gif',
      // Lluvia
      '10d': '/images/weather/rain-cozy.gif',
      '10n': '/images/weather/rain-night-cozy.gif',
      // Tormenta
      '11d': '/images/weather/thunderstorm-cozy.gif',
      '11n': '/images/weather/thunderstorm-night-cozy.gif',
      // Nieve
      '13d': '/images/weather/snow-cozy.gif',
      '13n': '/images/weather/snow-night-cozy.gif',
      // Niebla
      '50d': '/images/weather/fog-cozy.gif',
      '50n': '/images/weather/fog-night-cozy.gif',
      // Default
      'default': '/images/weather/default-cozy.gif'
    };
    
    // Mapa de iconos personalizados para el pron√≥stico
    const customIcons = {
      '01d': 'public/images/icons/sunny.png',
      '01n': 'public/images/icons/clear-night.png',
      '02d': 'public/images/icons/partly-cloudy-day.png',
      '02n': 'public/images/icons/partly-cloudy-night.png',
      '03d': 'public/images/icons/cloudy.png',
      '03n': 'public/images/icons/cloudy-night.png',
      '04d': 'public/images/icons/very-cloudy.png',
      '04n': 'public/images/icons/very-cloudy-night.png',
      '09d': 'public/images/icons/shower-rain.png',
      '09n': 'public/images/icons/shower-rain-night.png',
      '10d': 'public/images/icons/rain.png',
      '10n': 'public/images/icons/rain-night.png',
      '11d': 'public/images/icons/thunderstorm.png',
      '11n': 'public/images/icons/thunderstorm-night.png',
      '13d': 'public/images/icons/snow.png',
      '13n': 'public/images/icons/snow-night.png',
      '50d': 'public/images/icons/mist.png',
      '50n': 'public/images/icons/mist-night.png'
    };
    
    // Funci√≥n para obtener icono personalizado o fallback a OpenWeatherMap
    function getWeatherIconUrl(iconCode) {
      if (customIcons[iconCode]) {
        return customIcons[iconCode];
      } else {
        return `https://openweathermap.org/img/wn/${iconCode}@2x.png`;
      }
    }
    
    try {
      // Fetch weather data from the API endpoint
      const timestamp = new Date().getTime(); // Genera un n√∫mero √∫nico para evitar cach√©
      const response = await fetch(`/api/weather?nocache=${timestamp}`);
      // Check if the request was successful
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      
      const weatherData = await response.json();
      
      // Fetch air quality data (mocked - replace with your API)
      const airQualityValue = getRandomAirQuality();
      
      // Update current weather
      updateCurrentWeather(weatherData.list[0], airQualityValue);
      
      // Update weather GIF based on condition
      updateWeatherGif(weatherData.list[0].weather[0].icon);
      
      // Process forecast data to get one entry per day
      const dailyForecast = processDailyForecast(weatherData.list);
      
      // Create and append forecast items
      createForecastElements(dailyForecast);
      
      // Hide loading message and show weather content
      loadingElement.style.display = 'none';
      weatherContent.style.display = 'block';
    } catch (error) {
      console.error('Error fetching weather data:', error);
      
      // Hide loading message and show error
      loadingElement.style.display = 'none';
      errorMessage.style.display = 'block';
    }
  });
  
  function getRandomAirQuality() {
    // Mock function - replace with actual air quality API
    const values = ["Bueno", "Moderado", "Poco saludable"];
    const randomIndex = Math.floor(Math.random() * values.length);
    return values[randomIndex];
  }
  
  function updateCurrentWeather(currentData, airQualityValue) {
    // Update current temperature and description
    document.getElementById('current-temp').textContent = `${Math.round(currentData.main.temp)}¬∞C`;
    document.getElementById('weather-desc').textContent = capitalizeFirstLetter(currentData.weather[0].description);
    document.getElementById('feels-like').textContent = `${Math.round(currentData.main.feels_like)}¬∞C`;
    document.getElementById('humidity').textContent = `${currentData.main.humidity}%`;
    document.getElementById('wind-speed').textContent = `${Math.round(currentData.wind.speed * 3.6)} km/h`; // Convert m/s to km/h
    
    // Update air quality
    document.getElementById('air-quality').textContent = airQualityValue;
    const airQualityDot = document.getElementById('air-quality-dot');
    
    // Set air quality color
    if (airQualityValue === "Bueno") {
      airQualityDot.style.backgroundColor = "var(--good-quality)";
    } else if (airQualityValue === "Moderado") {
      airQualityDot.style.backgroundColor = "var(--moderate-quality)";
    } else {
      airQualityDot.style.backgroundColor = "var(--poor-quality)";
    }
    
    // Update weather icon
    updateWeatherIcon(currentData.weather[0].icon);
  }
  
  function updateWeatherIcon(iconCode) {
    const iconElement = document.getElementById('weather-icon');
    const iconMap = {
      '01d': '‚òÄÔ∏è',
      '01n': 'üåô',
      '02d': '‚õÖ',
      '02n': '‚òÅÔ∏è',
      '03d': '‚òÅÔ∏è',
      '03n': '‚òÅÔ∏è',
      '04d': '‚òÅÔ∏è',
      '04n': '‚òÅÔ∏è',
      '09d': 'üåßÔ∏è',
      '09n': 'üåßÔ∏è',
      '10d': 'üå¶Ô∏è',
      '10n': 'üåßÔ∏è',
      '11d': '‚õàÔ∏è',
      '11n': '‚õàÔ∏è',
      '13d': '‚ùÑÔ∏è',
      '13n': '‚ùÑÔ∏è',
      '50d': 'üå´Ô∏è',
      '50n': 'üå´Ô∏è'
    };
    
    iconElement.textContent = iconMap[iconCode] || '‚òÄÔ∏è';
  }
  
  function updateWeatherGif(iconCode) {
    const weatherGif = document.getElementById('weather-gif');
    const weatherGifs = {
      // Soleado
      '01d': 'public/images/icons/sunny-cozy.gif',
      // Noche despejadaicons
      '01n': 'public/images/icons/clear-night-cozy.gif',
      // Parcialmente nubladicons
      '02d': 'public/images/icons/partly-cloudy-day-cozy.gif',
      // Parcialmente nubladicons
      '02n': 'public/images/icons/partly-cloudy-night-cozy.gif',
      // Nubladoicons
      '03d': 'public/images/icons/cloudy-cozy.gif',
      '03n': 'public/images/icons/cloudy-night-cozy.gif',
      '04d': 'public/images/icons/very-cloudy-cozy.gif',
      '04n': 'https://i.pinimg.com/originals/be/09/9d/be099d47486da0906cd8ff960ad6edea.gif',
      // Lluvia ligera
      '09d': 'public/images/weather/light-rain-cozy.gif',
      '09n': 'public/images/weather/light-rain-night-cozy.gif',
      // Lluvia
      '10d': 'public/images/weather/rain-cozy.gif',
      '10n': 'public/images/weather/rain-night-cozy.gif',
      // Tormenta
      '11d': 'public/images/weather/thunderstorm-cozy.gif',
      '11n': 'public/images/weather/thunderstorm-night-cozy.gif',
      // Nieve
      '13d': 'public/images/weather/snow-cozy.gif',
      '13n': 'public/images/weather/snow-night-cozy.gif',
      // Niebla
      '50d': 'public/images/weather/fog-cozy.gif',
      '50n': 'public/images/weather/fog-night-cozy.gif',
      // Default
      'default': 'public/images/weather/default-cozy.gif'
    };
    
    // Set the appropriate GIF based on weather condition
    weatherGif.src = weatherGifs[iconCode] || weatherGifs['default'];
    weatherGif.alt = `Clima ${iconCode}`;
  }
  
  // Process forecast data to get one entry per day
  function processDailyForecast(forecastList) {
    const dailyData = [];
    const processedDates = new Set();
    
    for (const item of forecastList) {
      const date = new Date(item.dt * 1000);
      const dateString = date.toISOString().split('T')[0]; // Format: YYYY-MM-DD
      
      // Only take the first forecast for each day
      if (!processedDates.has(dateString)) {
        processedDates.add(dateString);
        dailyData.push(item);
        
        // Stop after we have 5 days
        if (dailyData.length >= 5) {
          break;
        }
      }
    }
    
    return dailyData;
  }
  
  function createForecastElements(forecast) {
    const forecastContainer = document.getElementById('forecast-container');
    forecastContainer.innerHTML = ''; // Clear existing forecast elements
    
    forecast.forEach((day) => {
      const date = new Date(day.dt * 1000);
      const dayOfWeek = getDayOfWeek(date);
      const formattedDate = formatDate(date);
      const iconCode = day.weather[0].icon;
      
      const forecastItem = document.createElement('div');
      forecastItem.className = 'forecast-item';
      
      // Uso de iconos personalizados o fallback a OpenWeatherMap
      const iconUrl = customIcons[iconCode] || `https://openweathermap.org/img/wn/${iconCode}@2x.png`;
      
      forecastItem.innerHTML = `
        <div class="forecast-date">${dayOfWeek}</div>
        <div class="forecast-date">${formattedDate}</div>
        <div class="forecast-icon-container">
          <img src="${iconUrl}" alt="${day.weather[0].description}" class="forecast-icon">
        </div>
        <div class="forecast-temp">${Math.round(day.main.temp)}¬∞C</div>
        <div>${capitalizeFirstLetter(day.weather[0].description)}</div>
      `;
      
      forecastContainer.appendChild(forecastItem);
    });
  }
  
  // Mapa de iconos personalizados para el pron√≥stico
  const customIcons = {
    '01d': 'images/icons/01d.svg',
    '01n': 'images/icons/01n.svg',
    '02d': 'images/icons/02d.svg',
    '02n': 'images/icons/02n.svg',
    '03d': 'images/icons/03d.svg',
    '03n': 'images/icons/03n.svg',
    '04d': 'images/icons/04d.svg',
    '04n': 'images/icons/04n.svg',
    '09d': 'images/icons/09d.svg',
    '09n': 'images/icons/09n.svg',
    '10d': 'images/icons/10d.svg',
    '10n': 'images/icons/10n.svg',
    '11d': 'images/icons/11d.svg',
    '11n': 'images/icons/11n.svg',
    '13d': 'images/icons/13d.svg',
    '13n': 'images/icons/13n.svg',
    '50d': 'images/icons/50d.svg',
    '50n': 'images/icons/50n.svg'
  };
  
  function getDayOfWeek(date) {
    const days = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];
    return days[date.getDay()];
  }
  
  function formatDate(date) {
    return `${date.getDate()}/${date.getMonth() + 1}`;
  }
  
  function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }



  export async function GET() {
    const API_KEY = import.meta.env.PUBLIC_WEATHER_API_KEY;
    const city = "Temuco";
    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=es`;
  
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error("Error al obtener el clima");
      const data = await response.json();
  
      return new Response(JSON.stringify(data), {
        headers: { "Content-Type": "application/json" },
      });
    } catch (error) {
      return new Response(JSON.stringify({ error: error.message }), {
        status: 500,
        headers: { "Content-Type": "application/json", "Cache-Control": "no-store, max-age=0", },
      });
    }
  }
  
</script>
